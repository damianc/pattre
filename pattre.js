var Pattern;(()=>{"use strict";var r={d:(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o:(r,t)=>Object.prototype.hasOwnProperty.call(r,t)},t={};(()=>{function e(){return this.anchors.push([1,r=>"^"+r]),this}function n(){return this.anchors.push([1,r=>r+"$"]),this}function s(){return this.anchors.push([3,r=>"\\b"+r+"\\b"]),this}function i(r){return this.anchors.push([2,t=>`(?<=${r})`+t]),this}function o(r){return this.anchors.push([2,t=>t+`(?=${r})`]),this}function u(r){if(!r)throw new Error("Capturing group label not passed.");return this.anchors.push([4,t=>"(?<"+r+">"+t+")"]),this}r.d(t,{default:()=>p});class c{anchors=[];isFirst=e.bind(this);isLast=n.bind(this);isWord=s.bind(this);hasBefore=i.bind(this);hasAfter=o.bind(this);as=u.bind(this)}const a={optional:Symbol("[Pattern Quantifier]: Optional"),oneOrMore:Symbol("[Pattern Quantifier]: One or More"),zeroOrMore:Symbol("[Pattern Quantifier]: Zero or More"),min:r=>r+"+",range:(r,t)=>r+"-"+t};class h extends c{restr;constructor(r,t=1){super();const e=function(r=1){if(1==r)return"";if("number"==typeof r)return"{"+r+"}";if("string"==typeof r){if(/^\d+$/.test(r))return"{"+r+"}";if(/\d+\+/.test(r))return"{"+r.slice(0,-1)+",}";if(/\d+\-\d+/.test(r)){const[,t,e]=r.match(/(\d+)\-(\d+)/);return"{"+t+","+e+"}"}if("?"===r)return r;if("??"===r||"?+"===r)return"*";if("+?"===r)return"+"}if("symbol"==typeof r)switch(r){case a.optional:return"?";case a.oneOrMore:return"+";case a.zeroOrMore:return"*"}return""}(t);this.restr=r+e}toString(){return this.anchors.sort((([r],[t])=>t-r)).reduce(((r,t)=>t[1](r)),this.restr)}}const f={...Object.entries({Digit:"\\d",Emoji:"\\p{Emoji}"}).reduce(((r,[t,e])=>({...r,[t]:r=>new h(e,r)})),{}),group:function(r,t){return`(?<${r}>`+t.join("")+")"},...a};function p(r){const t=r(f).join(""),e=new RegExp(t,"gu");return{flags:"iug",[Symbol.replace](r,t){if("function"==typeof t){const n=new RegExp(e);let s,i=r;for(;s=n.exec(i);){const r=s[0],e=t(r,s.groups);i=i.slice(0,s.index)+e+i.slice(s.index+r.length)}return i}return r.replace(e,t)},[Symbol.search](r){const t=new RegExp(e);return r.search(t)}}}})(),Pattern=t.default})();